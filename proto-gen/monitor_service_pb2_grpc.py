# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import monitor_service_pb2 as monitor__service__pb2


class MonitorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StackTrace = channel.unary_unary(
                '/monitor_service.MonitorService/StackTrace',
                request_serializer=monitor__service__pb2.StackTraceRequest.SerializeToString,
                response_deserializer=monitor__service__pb2.StackTraceResponse.FromString,
                )
        self.Profiling = channel.unary_unary(
                '/monitor_service.MonitorService/Profiling',
                request_serializer=monitor__service__pb2.ProfilingRequest.SerializeToString,
                response_deserializer=monitor__service__pb2.ProfilingResponse.FromString,
                )
        self.HeapProfiling = channel.unary_unary(
                '/monitor_service.MonitorService/HeapProfiling',
                request_serializer=monitor__service__pb2.HeapProfilingRequest.SerializeToString,
                response_deserializer=monitor__service__pb2.HeapProfilingResponse.FromString,
                )
        self.ListHeapProfiling = channel.unary_unary(
                '/monitor_service.MonitorService/ListHeapProfiling',
                request_serializer=monitor__service__pb2.ListHeapProfilingRequest.SerializeToString,
                response_deserializer=monitor__service__pb2.ListHeapProfilingResponse.FromString,
                )
        self.AnalyzeHeap = channel.unary_unary(
                '/monitor_service.MonitorService/AnalyzeHeap',
                request_serializer=monitor__service__pb2.AnalyzeHeapRequest.SerializeToString,
                response_deserializer=monitor__service__pb2.AnalyzeHeapResponse.FromString,
                )


class MonitorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StackTrace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Profiling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeapProfiling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHeapProfiling(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeHeap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StackTrace': grpc.unary_unary_rpc_method_handler(
                    servicer.StackTrace,
                    request_deserializer=monitor__service__pb2.StackTraceRequest.FromString,
                    response_serializer=monitor__service__pb2.StackTraceResponse.SerializeToString,
            ),
            'Profiling': grpc.unary_unary_rpc_method_handler(
                    servicer.Profiling,
                    request_deserializer=monitor__service__pb2.ProfilingRequest.FromString,
                    response_serializer=monitor__service__pb2.ProfilingResponse.SerializeToString,
            ),
            'HeapProfiling': grpc.unary_unary_rpc_method_handler(
                    servicer.HeapProfiling,
                    request_deserializer=monitor__service__pb2.HeapProfilingRequest.FromString,
                    response_serializer=monitor__service__pb2.HeapProfilingResponse.SerializeToString,
            ),
            'ListHeapProfiling': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHeapProfiling,
                    request_deserializer=monitor__service__pb2.ListHeapProfilingRequest.FromString,
                    response_serializer=monitor__service__pb2.ListHeapProfilingResponse.SerializeToString,
            ),
            'AnalyzeHeap': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeHeap,
                    request_deserializer=monitor__service__pb2.AnalyzeHeapRequest.FromString,
                    response_serializer=monitor__service__pb2.AnalyzeHeapResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'monitor_service.MonitorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StackTrace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor_service.MonitorService/StackTrace',
            monitor__service__pb2.StackTraceRequest.SerializeToString,
            monitor__service__pb2.StackTraceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Profiling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor_service.MonitorService/Profiling',
            monitor__service__pb2.ProfilingRequest.SerializeToString,
            monitor__service__pb2.ProfilingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeapProfiling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor_service.MonitorService/HeapProfiling',
            monitor__service__pb2.HeapProfilingRequest.SerializeToString,
            monitor__service__pb2.HeapProfilingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListHeapProfiling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor_service.MonitorService/ListHeapProfiling',
            monitor__service__pb2.ListHeapProfilingRequest.SerializeToString,
            monitor__service__pb2.ListHeapProfilingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeHeap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/monitor_service.MonitorService/AnalyzeHeap',
            monitor__service__pb2.AnalyzeHeapRequest.SerializeToString,
            monitor__service__pb2.AnalyzeHeapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
